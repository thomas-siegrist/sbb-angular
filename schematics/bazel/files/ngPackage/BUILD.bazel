package(default_visibility = ["//visibility:public"])
<% if (customTsConfig) { %>
load("@npm_bazel_typescript//:index.bzl", "ts_config")<% } %><% if (hasStyles) { %>
load("@npm//scss-bundle:index.bzl", "scss_bundle")<% } %>
load(
    "//src/<%= name %>:config.bzl",
    "<%= uc(name) %>_ENTRYPOINTS",
    "<%= uc(name) %>_TARGETS",
    "<%= uc(name) %>_MARKDOWN_TARGETS",
    "<%= uc(name) %>_TESTING_TARGETS",
)
load(
    "//tools:defaults.bzl",
    "markdown_to_html",
    "ng_module",
    "ng_package",<% if (hasTests) { %>
    "ng_test_library",
    "ng_web_test_suite",<% } %><% if (hasTypography) { %>
    "sass_binary",<% } %>
    "ts_library"
)

# Root "@sbb-esta/angular-<%= name %>" entry-point.
ng_module(
    name = "<%= name %>",
    srcs = glob(
        ["*.ts"<% if (hasSrcFiles) { %>, "src/**/*.ts"<% } %>],
        exclude = ["**/*.spec.ts"],
    ),
    module_name = "@sbb-esta/angular-<%= name %>",<% if (customTsConfig) { %>
    tsconfig = "<%= customTsConfig %>",<% } %>
    deps = ["//src/<%= name %>/%s" % p for p in <%= uc(name) %>_ENTRYPOINTS]<% if (dependencies.length) { %> + [<% for (let dependency of dependencies) { %>
        "<%= dependency %>",<% } %>
    ]<% } %>,
)<% if (customTsConfig) { %>

ts_config(
    name = "tsconfig",
    src = "tsconfig-build.json",
    deps = ["//src:bazel-tsconfig-build.json"],
)<% } %><% if (hasTypography) { %>

sass_binary(
    name = "typography",
    src = "typography.scss",
    include_paths = ["external/npm/node_modules"],
    deps = ["//src/core/styles:core_scss_lib"],
)<% } %><% if (hasStyles) { %>

scss_bundle(
    name = "styles_bundle",
    outs = ["_styles.scss"],
    args = [
        "--entryFile=$(location //src/<%= name %>:_styles.scss)",
        "--outFile=$(location :_styles.scss)",
    ],
    data = [
        # Config file is required by "scss-bundle" and will be automatically
        # loaded by the CLI. It expects the config to be in the execroot.
        "//:scss-bundle.config.json",
    ],
)<% } %><% if (hasTests) { %>

ng_test_library(
    name = "unit_test_sources",
    srcs = glob(
        ["src/**/*.spec.ts"],
        exclude = ["src/**/*.e2e.spec.ts"],
    ),
    deps = [
        ":<%= name %>",<% for (let dependency of testDependencies) { %>
        "<%= dependency %>",<% } %>
    ],
)

ng_web_test_suite(
    name = "unit_tests",
    deps = [":unit_test_sources"],
)<% } %>

markdown_to_html(
    name = "overview",
    srcs = [<% for (let markdownFile of markdownFiles) { %>
        ":<%= markdownFile %>",<% } %>
    ],
)

filegroup(
    name = "overviews",
    srcs = [":overview"] + ["//src/<%= name %>/%s:overview" % name for name in <%= uc(name) %>_MARKDOWN_TARGETS],
)

# Creates the @sbb-esta/angular-<%= name %> package published to npm.
ng_package(
    name = "npm_package",<% if (hasReadme) { %>
    readme_md = "README.md",<% } %>
    srcs = [
        "package.json",
    ],
    data = [<% if (hasStyles) { %>
        ":styles_bundle",<% } %><% if (hasTypography) { %>
        ":typography",<% } %>
    ],
    entry_point = ":public-api.ts",
    entry_point_name = "<%= name %>",<% if (hasSchematics) { %>
    nested_packages = ["//src/<%= name %>/schematics:npm_package"],<% } %>
    tags = ["release-package"],
    deps = <%= uc(name) %>_TARGETS + <%= uc(name) %>_TESTING_TARGETS,
)
