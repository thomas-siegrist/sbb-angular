/*** 
* BUTTON BASIC STRUCTURAL MIXINS AND PLACEHOLDERS
***/

/*** KICKSTART BASIC BUTTON ***/
@mixin buttons($fontSize: $buttonSizeFontDefault) {
  @include buttonReset();
  @include ellipsis;

  width: 100%;
  background-color: $buttonDefaultBgColor;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  font-size: pxToRem($fontSize);
  line-height: 1.4;
  border-style: solid;
  border-radius: toEm(2 / $fontSize);
  color: $buttonDefaultColor;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  @include mq($from: tabletPortrait) {
    font-size: pxToRem($fontSize);
    width: auto;
    min-width: toEm(60 / $fontSize);
    max-width: toEm(400 / $fontSize);
  }

  @include mq($from: desktop) {
    font-size: pxToRem($fontSize);
  }

  @include publicOnly() {
    border-width: pxToRem(2);
    height: toEm(48 / $fontSize);
    padding: toEm(12.5 / $fontSize) toEm(40 / $fontSize) toEm(15.5 / $fontSize) toEm(40 / $fontSize);

    @include mq($from: desktop4k) {
      font-size: pxToRem($fontSize * $scalingFactor4k);
      border-width: pxToRem(2 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem($fontSize * $scalingFactor5k);
      border-width: pxToRem(2 * $scalingFactor5k);
    }
  }

  @include businessOnly() {
    border-width: pxToRem(1);
    height: toEm(36 / $fontSize);
    padding: toEm(6 / $fontSize) toEm(16 / $fontSize) toEm(7 / $fontSize);
  }

  &:not(:disabled) {
    &:hover,
    &:focus {
      cursor: pointer;
    }
  }
}

/*** UTILITY MIXIN FOR %arrowbuttons PLACEHOLDER ***/
@mixin buttonArrowHover {
  padding-left: pxToEm(70, $buttonSizeFontDefault);
  padding-right: pxToEm(40, $buttonSizeFontDefault);
  transition: padding-left $linkiconAnimation, padding-right $linkiconAnimation,
    color $linkiconAnimation, border-color $linkiconAnimation;

  .sbb-svgsprite-icon {
    transition: opacity $linkiconAnimation, transform $linkiconAnimation, fill $linkiconAnimation;
  }

  .sbb-svgsprite-icon:first-of-type {
    opacity: 1;
    transform: translateX(0);
  }

  .sbb-svgsprite-icon:last-of-type {
    opacity: 0;
    transform: translateX(pxToEm(26));
  }
}

@mixin arrowbuttons {
  position: relative;
  font-size: pxToRem($buttonSizeFontDefault);

  @include publicOnly() {
    padding-left: toEm(40 / $buttonSizeFontDefault);
    padding-right: toEm(70 / $buttonSizeFontDefault);
    transition: height $linkiconAnimation, padding-left $linkiconAnimation,
      padding-right $linkiconAnimation, color $linkiconAnimation;

    @include mq($from: desktop4k) {
      font-size: pxToRem($sizeFontDefault4k);
    }

    @include mq($from: desktop5k) {
      font-size: pxToRem($sizeFontDefault5k);
    }
  }

  @include businessOnly() {
    padding-right: toEm(46 / $buttonSizeFontDefault);
  }

  .sbb-svgsprite-icon {
    position: absolute;
    width: pxToEm(24, $buttonSizeFontDefault);
    height: pxToEm(24, $buttonSizeFontDefault);
    top: 50%;
    margin-top: pxToEm(-12.5, $buttonSizeFontDefault);
    transition: opacity $linkiconAnimation, transform $linkiconAnimation, fill $linkiconAnimation;
    backface-visibility: hidden;
    @include svgIconColor($buttonDefaultColor);
    pointer-events: none;
  }

  .sbb-svgsprite-icon:first-of-type {
    margin-left: pxToEm(-30, $buttonSizeFontDefault);
    opacity: 0;
    transform: translateX(pxToEm(-26, $buttonSizeFontDefault));
  }

  .sbb-svgsprite-icon:last-of-type {
    margin-left: pxToEm(6, $buttonSizeFontDefault);
    opacity: 1;
    transform: translateX(0px);
  }
}

/*** 
* BUTTON WITH ARROWS PLACEHOLDER 
* - Used placeholder instead mixin to improve compiled output size
***/
%arrowbuttons {
  @include arrowbuttons;

  @include publicOnly() {
    &:not(:disabled) {
      &:hover,
      &:focus {
        @include buttonArrowHover;
      }
    }
  }
}
