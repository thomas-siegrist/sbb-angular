@import '../../../../angular-core/styles/common/form';

@mixin autocompleteBase() {
  position: relative;
  width: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: $autocompleteBg;
  border: $autocompleteBorder;
  transition: $autocompleteTransition;
  color: $autocompleteColor;

  &.sbb-autocomplete-visible {
    visibility: visible;
  }

  &.sbb-autocomplete-hidden {
    visibility: hidden;
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-width: toPx(2 * $scalingFactor4k);
      box-shadow: 0 toPx(8 * $scalingFactor4k) 0 rgba(0, 0, 0, 0.15);
    }

    @include mq($from: desktop5k) {
      border-width: toPx(2 * $scalingFactor5k);
      box-shadow: 0 toPx(8 * $scalingFactor5k) 0 rgba(0, 0, 0, 0.15);
    }
  }

  sbb-option-group {
    @include optionGroupBase;
  }
}

@mixin autocompleteCombinedBoxShadows($mode: default, $scalingFactor: 1) {
  $sign: 1;
  @if $mode == reverse {
    $sign: -1;
  }
  box-shadow: autocompleteBoxShadow($sign, $scalingFactor),
    autocompleteInputActiveBorder(-$sign, $scalingFactor);
}

@function autocompleteBoxShadow($sign, $scalingFactor) {
  @return 0 toPx($sign * $autocompleteShadowWidth * $scalingFactor) 0 rgba(0, 0, 0, 0.15);
}

@function autocompleteInputActiveBorder($sign, $scalingFactor) {
  @return 0
    toPx($sign * ($autocompleteBorderWidth + $autocompleteInputActiveBorderWidth) * $scalingFactor)
    0 toPx(-$autocompleteBorderWidth * $scalingFactor) $autocompleteInputActiveBorderBottomColor;
}

@mixin autocompleteOffsetCorrection($mode: default, $scalingFactor: 1) {
  $sign: -1;
  @if $mode == reverse {
    $sign: 1;
  }
  $offset-top: $sign * ($autocompleteBorderWidth - $autocompleteInputActiveBorderWidth) *
    $scalingFactor;

  @if $offset-top < 0 {
    $offset-top: $offset-top - 0.05; // better rendering e.g. in 4k mode
  }
  position: relative;
  top: toPx($offset-top);
}

@mixin autocompleteDirectionalRules($mode: default, $selectMode: false) {
  @if $mode == default {
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
    border-top: none;
    @include autocompleteCombinedBoxShadows();
    @include autocompleteOffsetCorrection();

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-bottom-left-radius: toPx(2 * $scalingFactor4k);
        border-bottom-right-radius: toPx(2 * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-bottom-left-radius: toPx(2 * $scalingFactor5k);
        border-bottom-right-radius: toPx(2 * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor5k);
      }
    }

    sbb-option-group {
      @include optionGroupBaseDirectional($selectMode);
    }
  } @else if $mode == reverse {
    border-radius: 2px 2px 0 0;
    border-top: $autocompleteBorderTopReverse;
    border-bottom: none;
    @include autocompleteCombinedBoxShadows($mode: reverse);
    @include autocompleteOffsetCorrection($mode: reverse);

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-left-radius: toPx(2 * $scalingFactor4k);
        border-top-right-radius: toPx(2 * $scalingFactor4k);
        border-top-width: toPx(2 * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-left-radius: toPx(2 * $scalingFactor5k);
        border-top-right-radius: toPx(2 * $scalingFactor5k);
        border-top-width: toPx(2 * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor5k);
      }
    }

    sbb-option-group {
      @include optionGroupBaseDirectionalReverse($selectMode);
    }
  }
}

@mixin autocompleteInputActive($mode: default) {
  @if $mode == default {
    @include autocompleteInputActiveDefault();
  } @else if $mode == reverse {
    @include autocompleteInputActiveReverse();
  }
}

@mixin autocompleteInputActiveDefault() {
  border-radius: 2px 2px 0 0;
  border-color: $sbbColorGrey;
}

@mixin autocompleteInputActiveReverse() {
  border-radius: 0 0 2px 2px;
  border-color: $sbbColorGrey;
}

@mixin optionGroupBase {
  position: relative;
  display: block;
  color: $sbbColorMetal;

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-top-width: toPx(1 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      border-top-width: toPx(1 * $scalingFactor5k);
    }
  }

  sbb-option {
    padding-left: $optionGroupItemPaddingLeft;

    &:first-of-type {
      @include publicOnly() {
        padding-top: 0;
      }

      @include businessOnly() {
        padding-top: $autocompletePaddingTop;

        &::after {
          top: toPx($optionSelectedBarTopFirst);
        }
      }
    }
  }
  .sbb-optgroup-label {
    padding-left: $autocompletePaddingX;
    padding-right: $autocompletePaddingX;
    padding-top: $autocompletePaddingTop;

    @include businessOnly() {
      padding-bottom: 0;
    }

    @include publicOnly() {
      padding-bottom: $autocompletePaddingTop;

      @include mq($from: desktop4k) {
        font-size: toPx(10 * $scalingFactor4k);
        padding-top: toPx($autocompletePaddingTop * $scalingFactor4k);
        padding-bottom: toPx($autocompletePaddingTop * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        font-size: toPx(10 * $scalingFactor5k);
        padding-top: toPx($autocompletePaddingTop * $scalingFactor5k);
        padding-bottom: toPx($autocompletePaddingTop * $scalingFactor5k);
      }
    }

    @include label;
  }
}

@mixin optionGroupBaseDirectional($selectMode: false) {
  sbb-option {
    padding-left: $optionGroupItemPaddingLeft;
  }

  @if $selectMode == false {
    border-top: 1px solid $autocompleteInputActiveBorderBottomColor;

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-width: toPx(1 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-width: toPx(1 * $scalingFactor5k);
      }
    }
  } @else {
    border-top: 0;
    &:last-of-type {
      border-bottom: 1px solid $autocompleteInputActiveBorderBottomColor;
    }

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-width: 0;
      }

      @include mq($from: desktop5k) {
        border-top-width: 0;
      }
    }
  }
}

@mixin optionGroupBaseDirectionalReverse($selectMode: false) {
  sbb-option {
    padding-left: $optionGroupItemPaddingLeft;
  }

  @if $selectMode == false {
    border-bottom: 1px solid $autocompleteInputActiveBorderBottomColor;

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-bottom-width: toPx(1 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-bottom-width: toPx(1 * $scalingFactor5k);
      }
    }
  } @else {
    border-bottom: 0;
    &:first-of-type {
      border-top: 1px solid $autocompleteInputActiveBorderBottomColor;
    }

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-bottom-width: 0;
      }

      @include mq($from: desktop5k) {
        border-bottom-width: 0;
      }
    }
  }
}
