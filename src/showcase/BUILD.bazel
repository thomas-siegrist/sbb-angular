package(default_visibility = ["//visibility:public"])

load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@npm_bazel_karma//:index.bzl", "karma_web_test_suite")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm_bazel_typescript//:index.bzl", "ts_config", "ts_devserver", "ts_library")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")

ts_config(
    name = "tsconfig-test",
    src = "tsconfig-test.json",
    deps = [":tsconfig.json"],
)

# Run the sass compiler to output "styles.css"
sass_binary(
    name = "styles",
    src = "styles.scss",
    include_paths = ["external/npm/node_modules"],
    deps = ["//src/core/styles:core_scss_lib"],
)

ng_module(
    name = "showcase",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    generate_ve_shims = True,
    deps = [
        "//src/showcase/app",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser"
    ],
)

rollup_bundle(
    name = "bundle",
    config_file = "rollup.config.js",
    entry_point = ":main.prod.ts",
    deps = [
        "//src/showcase",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

terser_minified(
    name = "bundle.min",
    src = ":bundle",
)

html_insert_assets(
    name = "asset_injected_index_html",
    outs = ["_/index.html"],
    args = [
        "--html",
        "$(execpath :index.html)",
        "--out",
        "$@",
        "--roots",
        "$(RULEDIR)",
        "--assets",
        "$(execpath :styles.css)",
        "$(execpath @npm//:node_modules/zone.js/dist/zone.min.js)",
        "bundle.min.js",
    ],
    data = [
        ":index.html",
        ":styles.css",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
)

pkg_web(
    name = "prodapp",
    additional_root_paths = ["src/showcase/_"],
    srcs = [
        "@npm//:node_modules/zone.js/dist/zone.min.js",
        ":bundle.min",
        ":styles.css",
        ":asset_injected_index_html",
    ],
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    args = [
        "--port",
        "4200",
    ],
    templated_args = ["src/showcase/prodapp"],
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# named UMD and named AMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    additional_root_paths = ["project/src/_"],
    port = 4200,
    entry_module = "project/src/main.dev",
    serving_path = "/bundle.min.js",
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        "//tools/rxjs:rxjs_umd_modules",
    ],
    static_files = [
        "@npm//:node_modules/zone.js/dist/zone.min.js",
        ":styles.css",
        "//src/showcase/assets",
        ":asset_injected_index_html",
    ],
    deps = ["//src/showcase"],
)

exports_files([
    "tsconfig.json",
])
