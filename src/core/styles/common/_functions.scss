// ----------------------------------------------------------------------------------------------------
// Functions
// ----------------------------------------------------------------------------------------------------

@import './variables';

// Helper Functions
// ----------------------------------------------------------------------------------------------------

@function pxToEm($px, $ref: $sizeFontBase) {
  @return toEm(toPx($px) / toPx($ref));
}

@function pxToRem($px) {
  @return toRem(toPx($px) / toPx($sizeFontBase));
}

@function pxToPc($px, $ref: $sizeWidthContent) {
  @return (toPx($px) / toPx($ref) * 100%);
}

@function toEm($val) {
  @return ($val + 0em);
}

@function toRem($val) {
  @return ($val + 0rem);
}

@function toPx($val) {
  @return ($val + 0px);
}

// Spacings
// ----------------------------------------------------------------------------------------------------

@function paragraphSpacing($fontSize: $sizeFontDefault) {
  @return toEm($gutterHeight/$fontSize); // 8px
}

@function innerComponentSpacing($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 3) / $fontSize); // 24px
}

@function innerComponentBottomSpacingSmall($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 4.5) / $fontSize); // 36px
}

@function interComponentSpacingTiny($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 3) / $fontSize); // 24px
}

@function interComponentSpacingSmall($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 6) / $fontSize); // 48px
}

@function interComponentSpacingTablet($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 7) / $fontSize); // 56px
}

@function interComponentSpacing($fontSize: $sizeFontDefault) {
  @return toEm(($gutterHeight * 10) / $fontSize); // 80px
}

// Arithmetic functions
// ----------------------------------------------------------------------------------------------------

// Calculate power
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

// Factorial function
@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

// Trigonometric functions
// ----------------------------------------------------------------------------------------------------

// Pi constant
@function pi() {
  @return 3.14159265359;
}

// Get radians from angle
@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

// Sine function
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

// Cosine function
@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

// Tangent function
@function tan($angle) {
  @return sin($angle) / cos($angle);
}
